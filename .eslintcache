[{"D:\\311's learning\\311-practice\\current-practice\\src\\index.js":"1","D:\\311's learning\\311-practice\\current-practice\\src\\App.js":"2","D:\\311's learning\\311-practice\\current-practice\\src\\utility-components\\GlobalStyles.js":"3","D:\\311's learning\\311-practice\\current-practice\\src\\utility-components\\index.js":"4","D:\\311's learning\\311-practice\\current-practice\\src\\utility-components\\Section.js":"5","D:\\311's learning\\311-practice\\current-practice\\src\\pages\\index.js":"6","D:\\311's learning\\311-practice\\current-practice\\src\\pages\\Home.js":"7","D:\\311's learning\\311-practice\\current-practice\\src\\containers\\HeaderContainer.js":"8","D:\\311's learning\\311-practice\\current-practice\\src\\components\\index.js":"9","D:\\311's learning\\311-practice\\current-practice\\src\\components\\header\\Header.js":"10","D:\\311's learning\\311-practice\\current-practice\\src\\components\\header\\HeaderStyles.js":"11","D:\\311's learning\\311-practice\\current-practice\\src\\components\\card\\Card.js":"12","D:\\311's learning\\311-practice\\current-practice\\src\\components\\card\\CardStyles.js":"13","D:\\311's learning\\311-practice\\current-practice\\src\\containers\\CardContainer.js":"14","D:\\311's learning\\311-practice\\current-practice\\src\\redux\\index.js":"15","D:\\311's learning\\311-practice\\current-practice\\src\\redux\\root-reducer.js":"16","D:\\311's learning\\311-practice\\current-practice\\src\\redux\\countries\\reducer.js":"17","D:\\311's learning\\311-practice\\current-practice\\src\\redux\\countries\\action-types.js":"18","D:\\311's learning\\311-practice\\current-practice\\src\\redux\\countries\\actions.js":"19","D:\\311's learning\\311-practice\\current-practice\\src\\pages\\Details.js":"20","D:\\311's learning\\311-practice\\current-practice\\src\\components\\details\\Details.js":"21","D:\\311's learning\\311-practice\\current-practice\\src\\containers\\DetailsContainer.js":"22","D:\\311's learning\\311-practice\\current-practice\\src\\components\\details\\DetailsStyles.js":"23","D:\\311's learning\\311-practice\\current-practice\\src\\utility-components\\CardSkeleton.js":"24","D:\\311's learning\\311-practice\\current-practice\\src\\utility-components\\DetailsSkeleton.js":"25","D:\\311's learning\\311-practice\\current-practice\\src\\utility-components\\Group.js":"26","D:\\311's learning\\311-practice\\current-practice\\src\\components\\search-box\\SearchBox.js":"27","D:\\311's learning\\311-practice\\current-practice\\src\\components\\region-filter-box\\RegionFilterBox.js":"28","D:\\311's learning\\311-practice\\current-practice\\src\\theme\\useTheme.js":"29","D:\\311's learning\\311-practice\\current-practice\\src\\theme\\themes.js":"30","D:\\311's learning\\311-practice\\current-practice\\src\\helpers\\formatPopulation.js":"31"},{"size":212,"mtime":1632831444043,"results":"32","hashOfConfig":"33"},{"size":964,"mtime":1632889600152,"results":"34","hashOfConfig":"33"},{"size":942,"mtime":1632835013705,"results":"35","hashOfConfig":"33"},{"size":272,"mtime":1632813751766,"results":"36","hashOfConfig":"33"},{"size":605,"mtime":1632841924924,"results":"37","hashOfConfig":"33"},{"size":90,"mtime":1632654560804,"results":"38","hashOfConfig":"33"},{"size":166,"mtime":1632833186727,"results":"39","hashOfConfig":"33"},{"size":1540,"mtime":1632838898443,"results":"40","hashOfConfig":"33"},{"size":301,"mtime":1632817444577,"results":"41","hashOfConfig":"33"},{"size":632,"mtime":1632829835112,"results":"42","hashOfConfig":"33"},{"size":625,"mtime":1632842000703,"results":"43","hashOfConfig":"33"},{"size":1400,"mtime":1632908054250,"results":"44","hashOfConfig":"33"},{"size":1445,"mtime":1632908045026,"results":"45","hashOfConfig":"33"},{"size":2638,"mtime":1632908041252,"results":"46","hashOfConfig":"33"},{"size":381,"mtime":1632667138295,"results":"47","hashOfConfig":"33"},{"size":205,"mtime":1632669618445,"results":"48","hashOfConfig":"33"},{"size":1324,"mtime":1632804970994,"results":"49","hashOfConfig":"33"},{"size":699,"mtime":1632817195244,"results":"50","hashOfConfig":"33"},{"size":1933,"mtime":1632884552939,"results":"51","hashOfConfig":"33"},{"size":187,"mtime":1632833191542,"results":"52","hashOfConfig":"33"},{"size":1826,"mtime":1632886716877,"results":"53","hashOfConfig":"33"},{"size":6849,"mtime":1632889227571,"results":"54","hashOfConfig":"33"},{"size":2922,"mtime":1632888876101,"results":"55","hashOfConfig":"33"},{"size":5203,"mtime":1632834033453,"results":"56","hashOfConfig":"33"},{"size":1437,"mtime":1632834151858,"results":"57","hashOfConfig":"33"},{"size":323,"mtime":1632841580883,"results":"58","hashOfConfig":"33"},{"size":883,"mtime":1632841815539,"results":"59","hashOfConfig":"33"},{"size":2789,"mtime":1632842046125,"results":"60","hashOfConfig":"33"},{"size":658,"mtime":1632830545008,"results":"61","hashOfConfig":"33"},{"size":419,"mtime":1632835015826,"results":"62","hashOfConfig":"33"},{"size":120,"mtime":1632889279088,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"lblsff",{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"D:\\311's learning\\311-practice\\current-practice\\src\\index.js",[],["128","129"],"D:\\311's learning\\311-practice\\current-practice\\src\\App.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\utility-components\\GlobalStyles.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\utility-components\\index.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\utility-components\\Section.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\pages\\index.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\pages\\Home.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\containers\\HeaderContainer.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\components\\index.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\components\\header\\Header.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\components\\header\\HeaderStyles.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\components\\card\\Card.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\components\\card\\CardStyles.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\containers\\CardContainer.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\redux\\index.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\redux\\root-reducer.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\redux\\countries\\reducer.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\redux\\countries\\action-types.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\redux\\countries\\actions.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\pages\\Details.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\components\\details\\Details.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\containers\\DetailsContainer.js",["130","131"],"import { Details, Card } from '../components'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { useEffect, useRef } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { getSelectedCountry, removeSelectedCountry, getRelatedCountries } from '../redux/countries/actions'\r\nimport { DetailsSkeleton, CardSkeleton } from '../utility-components'\r\nimport { formatPopulation } from '../helpers/formatPopulation'\r\n\r\nconst DetailsContainer = () => {\r\n  const { country } = useParams()\r\n  const history = useHistory()\r\n  const { isLoading, selectedCountry, relatedCountries, countries } = useSelector(\r\n    globalState => globalState.countriesState\r\n  )\r\n  const {\r\n    name,\r\n    nativeName,\r\n    population,\r\n    flags,\r\n    topLevelDomain,\r\n    region,\r\n    subregion,\r\n    capital,\r\n    currencies,\r\n    languages,\r\n    timezones,\r\n    borders,\r\n  } = selectedCountry\r\n\r\n  const dispatch = useDispatch()\r\n  const isInitialRender = useRef(true)\r\n\r\n  useEffect(() => {\r\n    isInitialRender.current = false\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    dispatch(getSelectedCountry(country))\r\n\r\n    return () => dispatch(removeSelectedCountry())\r\n  }, [dispatch, country])\r\n\r\n  useEffect(() => {\r\n    dispatch(getRelatedCountries(region))\r\n  }, [selectedCountry])\r\n\r\n  //del later\r\n  console.log(isLoading)\r\n  console.log(relatedCountries)\r\n\r\n  if (isLoading || isInitialRender.current) {\r\n    return (\r\n      <Details>\r\n        <Details.Frame>\r\n          <DetailsSkeleton />\r\n        </Details.Frame>\r\n      </Details>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        <Details>\r\n          <Details.Frame>\r\n            <Details.Flag src={flags?.svg} alt={`${name}-flag`} />\r\n            <Details.Content>\r\n              <Details.CountryName>{name}</Details.CountryName>\r\n              <Details.MetaFrame>\r\n                <Details.MetaGroup>\r\n                  <Card.MetaGroup>\r\n                    <Card.MetaKey>Native Name:</Card.MetaKey>\r\n                    <Card.MetaValue>{nativeName}</Card.MetaValue>\r\n                  </Card.MetaGroup>\r\n\r\n                  <Card.MetaGroup>\r\n                    <Card.MetaKey>Population:</Card.MetaKey>\r\n                    <Card.MetaValue>{formatPopulation(population)}</Card.MetaValue>\r\n                  </Card.MetaGroup>\r\n\r\n                  <Card.MetaGroup>\r\n                    <Card.MetaKey>Region:</Card.MetaKey>\r\n                    <Card.MetaValue>{region}</Card.MetaValue>\r\n                  </Card.MetaGroup>\r\n\r\n                  <Card.MetaGroup>\r\n                    <Card.MetaKey>Sub Region:</Card.MetaKey>\r\n                    <Card.MetaValue>{subregion}</Card.MetaValue>\r\n                  </Card.MetaGroup>\r\n\r\n                  <Card.MetaGroup>\r\n                    <Card.MetaKey>Capital:</Card.MetaKey>\r\n                    <Card.MetaValue>{capital}</Card.MetaValue>\r\n                  </Card.MetaGroup>\r\n                </Details.MetaGroup>\r\n                <Details.MetaGroup>\r\n                  <Card.MetaGroup>\r\n                    <Card.MetaKey>Top Level Domain:</Card.MetaKey>\r\n                    <Card.MetaValue>{topLevelDomain && topLevelDomain[0]}</Card.MetaValue>\r\n                  </Card.MetaGroup>\r\n\r\n                  <Card.MetaGroup>\r\n                    <Card.MetaKey>Currencies:</Card.MetaKey>\r\n                    <Card.MetaValue>\r\n                      {currencies\r\n                        ? currencies.map(currency => `${currency.name} ( ${currency.symbol} )`).join(', ')\r\n                        : 'not provided!'}\r\n                    </Card.MetaValue>\r\n                  </Card.MetaGroup>\r\n\r\n                  <Card.MetaGroup>\r\n                    <Card.MetaKey>Languages:</Card.MetaKey>\r\n                    <Card.MetaValue>{languages && languages.map(language => language.name).join(', ')}</Card.MetaValue>\r\n                  </Card.MetaGroup>\r\n\r\n                  <Card.MetaGroup>\r\n                    <Card.MetaKey>Timezone:</Card.MetaKey>\r\n                    <Card.MetaValue>{timezones && timezones.map(timezone => timezone).join(', ')}</Card.MetaValue>\r\n                  </Card.MetaGroup>\r\n                </Details.MetaGroup>\r\n              </Details.MetaFrame>\r\n\r\n              <Details.BorderCountriesFrame>\r\n                <Card.MetaKey style={{ width: '33%' }}>Border Countries:</Card.MetaKey>\r\n                <Details.BorderCountriesGroup>\r\n                  {selectedCountry.borders\r\n                    ? countries.map(\r\n                        (country, index) =>\r\n                          selectedCountry.borders.includes(country.alpha3Code) && (\r\n                            <Details.BorderCountry key={index} to={`/${country.name}`}>\r\n                              {country.name}\r\n                            </Details.BorderCountry>\r\n                          )\r\n                      )\r\n                    : 'No border country.'}\r\n                </Details.BorderCountriesGroup>\r\n              </Details.BorderCountriesFrame>\r\n              <Details.BackButton onClick={() => history.goBack()}>\r\n                <img src='./icons/arrow.svg' alt='' />\r\n                Back\r\n              </Details.BackButton>\r\n            </Details.Content>\r\n          </Details.Frame>\r\n        </Details>\r\n\r\n        <Card>\r\n          <Card.Heading>\r\n            Other {relatedCountries.length === 0 ? '...' : relatedCountries.length - 1} countries from {region} region\r\n          </Card.Heading>\r\n          <Card.Frame>\r\n            {isLoading && <CardSkeleton />}\r\n            {relatedCountries\r\n              .filter(country => country.name !== selectedCountry?.name)\r\n              .map(country => {\r\n                const { id, flags, name, region, capital, population } = country\r\n                return (\r\n                  <Card.Item key={id} to={`/${name.toLowerCase()}`}>\r\n                    <Card.Flag src={flags?.svg} alt={`${name}-flag`} />\r\n                    <Card.Content>\r\n                      <Card.CountryName>{name}</Card.CountryName>\r\n                      <Card.MetaGroup>\r\n                        <Card.MetaKey>Region:</Card.MetaKey>\r\n                        <Card.MetaValue>{region}</Card.MetaValue>\r\n                      </Card.MetaGroup>\r\n                      <Card.MetaGroup>\r\n                        <Card.MetaKey>Capital:</Card.MetaKey>\r\n                        <Card.MetaValue>{capital || 'Not provided'}</Card.MetaValue>\r\n                      </Card.MetaGroup>\r\n                      <Card.MetaGroup>\r\n                        <Card.MetaKey>Population: </Card.MetaKey>\r\n                        <Card.MetaValue>{population}</Card.MetaValue>\r\n                      </Card.MetaGroup>\r\n                    </Card.Content>\r\n                  </Card.Item>\r\n                )\r\n              })}\r\n          </Card.Frame>\r\n        </Card>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DetailsContainer\r\n","D:\\311's learning\\311-practice\\current-practice\\src\\components\\details\\DetailsStyles.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\utility-components\\CardSkeleton.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\utility-components\\DetailsSkeleton.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\utility-components\\Group.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\components\\search-box\\SearchBox.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\components\\region-filter-box\\RegionFilterBox.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\theme\\useTheme.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\theme\\themes.js",[],"D:\\311's learning\\311-practice\\current-practice\\src\\helpers\\formatPopulation.js",[],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":27,"column":5,"nodeType":"138","messageId":"139","endLine":27,"endColumn":12},{"ruleId":"140","severity":1,"message":"141","line":45,"column":6,"nodeType":"142","endLine":45,"endColumn":23,"suggestions":"143"},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"no-unused-vars","'borders' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'region'. Either include them or remove the dependency array.","ArrayExpression",["146"],"no-global-assign","no-unsafe-negation",{"desc":"147","fix":"148"},"Update the dependencies array to be: [dispatch, region, selectedCountry]",{"range":"149","text":"150"},[1269,1286],"[dispatch, region, selectedCountry]"]